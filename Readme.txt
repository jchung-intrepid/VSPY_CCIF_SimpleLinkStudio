To integrate SimpleLinkStudio.lib to the C Code Interface (CCIF) project generated by Vspy:

>> 1. Generate a CCIF project from Vspy

>> 2. Add the entire simplelink directory into the CCIF project directory

>> 3. In Visual Studio, make the following changes to the project properties:

   i) Goto Configuration Properties -> C/C++ -> Additional Include Directories. Add simplelink\, simplelink\include, simplelink\common, and simplelink\source. 
   ii) Goto Configuration Properties -> Linker -> Input -> Additional Dependencies. Add the SimpleLinkStudio.lib.
   iii) Goto Configuration Properties -> C/C++ -> Code Generation -> Runtime Library. Set to 'Multi-thread Debug DLL (/MDd)'.
   iv) Goto Configuration Properties -> C/C++ -> Precompiled Headers. Set to 'Not using precompiled header'.
   
>> 4. Add the following SimpleLinkStudio API callback definitions in SpyCCode.c:

   _SimpleLinkGeneralEventHandler
   _SimpleLinkNetAppEventHandler
   _SimpleLinkSockEventHandler
   _SimpleLinkWlanEventHandler
   _SimpleLinkHttpServerCallback
   
>> 5. C Runtime Library Adjustment:

   SimpleLinkStudio.lib links to msvcrt.lib (dynamic, multithreaded CRT) while the default CCIF Visual Studio project is setup to link 
   against the libcmtd.lib (static, multithreaded). Hence you will get a link error like below:
   
   LINK : warning LNK4098: defaultlib 'MSVCRT' conflicts with use of other libs; use /NODEFAULTLIB:library

   Since we cannot change SimpleLinkStudio.lib to link against libcmtd.lib (TI does not provide source code), we must adjust the 
   Visual Studio project setting to force CCIF project to links against msvcrt.lib (MD / MDd).
   
   Another solution is to keep the CCIF project to link against libcmtd.lib and force the linker to ignore libcmt.lib and libcmtd.lib.
   But be aware as this may cause issues that may come up during runtime and may be extremely hard to debug.
   
* WARNING: The CCIF project is a Windows DLL project relying on Win32 API and hence it adheres to default calling convention of _stdcall.
The SimpleLinkStudio static library however, seems to follow the default C/C++ program _cdecl calling convention. So in order for linker to link to those
static library functions from CCIF program (invoke _cdecl from _stdcall), we had to explictly specify the calling convention of all 
SimpleLinkStudio API functions as _cdecl so that the calling convention intended by SimpleLinkStudio (_cdecl) is not overwritten with the
CCIF project-wide setting, which is set to '_stdcall' by default in Visual Studio.